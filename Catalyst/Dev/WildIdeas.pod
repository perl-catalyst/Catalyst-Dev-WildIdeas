package Catalyst::Dev::WildIdeas;

=head1 Description

Brain dump of possible tasks for L<Catalyst> for summer 2013 and beyond.

=head1 Fix ModPerl Support

When we introduced native PSGI in Catalyst 5.900xx we did our best to maintain
backwards compatibility while meeting our goal of extracting all the logic that
goes into connecting your application to a handler, be it Starman, FastCGI and
even Mod Perl.  However in order to support the classic Mod Perl 'use this
Catalyst Application as an Apache handler' it was necessary to port over some
of the engine related logic and maintain it in the C<Catalyst.pm> class.  It is
somewhat undesirable to leak this logic into the class since it places some
additional maintainance requirement on the core team. Additionally, we failed
to include the $c->apache method in our port which, undesirable and incorrect
as it may be, introduced a blocking incompatibility for people using Catalyst
with Mod Perl. We would like to isolate ModPerl support in Catalyst while
maintaining backcompat over a clear depracation cycle.  So I propose:

=over 4

=item Promote 'new style' PSGI Apache Configuration

For people who still desire to use ModPerl, or who have legacy applications
that require it, promote the idea of using the Plack approach for running your
PSGI application under ModPerl.  In other words we would replace the following
example ModPerl Apache configuration (example, needs to be reviewed):

    ## Apache 1 example

    <Perl>
      use lib qw( /var/www/MyApp/lib );
    </Perl>

    <Location />
      SetHandler       perl-script
      PerlHandler      MyApp
    </Location>


    ## Apache 2 example

    PerlSwitches -I/var/www/MyApp/lib
    PerlModule MyApp

    <Location />
      SetHandler          modperl
      PerlResponseHandler MyApp
    </Location>

With the following PSGI / Plack example, and recommend people consider updating
their code if they are using the 'classic' approach.  This should be an ungrade
that requires no new code to support (example, needs to be reviewed):

    ## Apache 1 example

    <Location />
      SetHandler perl-script
      PerlHandler Plack::Handler::Apache1
      PerlSetVar psgi_app /path/to/app.psgi
    </Location>
     
    <Perl>
      use Plack::Handler::Apache1;
      Plack::Handler::Apache1->preload("/path/to/app.psgi");
    </Perl>

    ## Apache 2 example

    PerlLoadModule MyApp

    <Location />
      SetHandler modperl
      PerlResponseHandler Plack::Handler::Apache2
      PerlSetVar psgi_app /path/to/app.psgi
    </Location>

Alternatively, if you don't have or want a *.psgi file, you could just create
a subclass of correct handler.

    ## Apache 1 example

    package MyApp::Apache1Handler;
    
    use Plack::Handler::Apache1;
    use MyApp::Web; # This is you Catalyst Application

    sub handler {
      Plack::Handler::Apache1->call_app(shift, MyApp::Web->_finalize_psgi_app)
    }

    ## Apache 2 example

    package MyApp::Apache2Handler;
    
    use Plack::Handler::Apache2;
    use MyApp::Web; # This is you Catalyst Application

    sub handler {
      Plack::Handler::Apache2->call_app(shift, MyApp::Web->_finalize_psgi_app)
    }
    
    1;

B<NOTE> You might need to wrap MyApp::Web->psgi_app in Myapp::Web->apply_default_middleware
to get all the expected behaviors.

You could then just s/MyApp::Web/MyApp::Apache[1|2]Handler/ in you apache.conf
file and avoid the need to create a stand alone psgi file if you don't already
have one.

Going forward the second/third approach would be prefered, since if the
application does not need $c->apache then you don't even need the backcompat
Plugin at all (see next point.)

=item Backcompat Plugin

For people that cannot perform this Apache configuration upgrade, or who
have code that is using $c->apache, we will write a new Catalyst::Plugin that
extracts the existing ModPerl handler code from Catalyst.pm while adding back
the missing $c->apache method.  This plugin will be a stand alone distribution
but will be made a dependency for the Catalyst core code and automatically
installed if $ENV{MOD_PERL} is true.  However this will be considered a
deprecation cycle for this feature, and people will be encouraged to make sure
they start to include the stand alone distribution in their application
Makefile.pl / dist.ini / cpanfile or custom installation tool, as well as add
the plugin to the list of plugins that are installed with their application.

There should be clear documentation for all this in Upgrading.POD so that
someone who is upgrading Catalyst can upgrade in steps and follow instructions
such to place the minimal burden on the upgrade process (support the idea that
upgrading should require only configuration changes or installation of back-
compat plugins.)

=back

=head1 Better Integration of Unicode

In the previous development cycle we cored the Encoding::Unicode plugin.  Now
we would like to better integrate that plugin code directly into the core code.
This would make it easier for code maintainers to understand the what is going
on with the code, since plugins change code behavior 'at a distance' and you
may not immediately understand what is happening.  In addition the code should
perform a bit better, since the method modification approach that plugins use
tend to introduce some performance penalty.  Lastly, we hope it will make it
easier to improve unicode support in the future.  We propose

=over 4

=item Integrate logic

move all logic in the cored Encoding::Plugin to Catalyst.pm or to other files
as makes sense.

=item Clear out Plugin

Make the cored Encoding::Plugin empty, but remaining in the distribution for
now in order to overwrite existing plugins people might have if they are
upgrading from an older Catalyst.  We should warn in the docs that this empty
body plugin will eventually disappear.

=item Backcompat with existing Plugin users

Make sure that we detect and disable attempts to install the stand alone
plugin and warn users that they need to remove it.  For example if someone has
code like:

    use Catalyst qw/Encoding::Unicode/;

We should skip applying that plugin, but instead warn that the plugin has been
deprecated.

Additionally, if someone tries to apply the deprecated plugin, we should check
$c->config->{encoding} and warn if there is no value (since this is now required
in the cored behavior, and also set the value to 'UTF8'.

=item Double check documentation

We should review the unicode documentation for correctness.

=item Review Catalyst::Manual

We should make sure the existing L<Catalyst::Manual> does not recommend this
plugin since it is no longer required

=back

=head1 Make sure the entire test suite passes under 'parse_on_demand'

In the current version of Catalyst, the Request body is automatically parsed
which prevents optimizations and customizations around this potentially
expensive process.  Future versions of Catalyst may wish to make
'parse_on_demand' the default in order to be able to move the platform
forward.  In support of this goal, we should make sure all relevent tests
in the existing test suite support this options (we can exclude those tests
which are explicitly looking for pre-parsed bodies)

This can by created a new %ENV flag, CATALYST_PARSE_ON_DEMAND which sets the
option, and running the test suite with it enabled.  Code should be fixed if
possible to make sure it all works as expected

=head1 New Request attribute ->body_fh

In current Catalyst a request body is preparsed into a Perl data structure
and any file fileloads are saved into temporary files.  Although this is
handy default behavior, it is somewhat outdated since it does not support 
common methods of posting data to a webserver (no built in JSON post support
for example) and it does not easily allow nonblocking reading of large posted
files, or event based parsing (think using SAX to parse an XML upload so that
you'd not have to load the entire parsed file into memory).  We'd like to 
allow people to experiment with these kinds of use cases.

To support this, add a new method $c->req->body_fh which is enabled with the
configuration option 'parse_on_demand' which return a simple file handle
representing the posted body or upload before we attempt to process it.
This will enable people (for example) to create streaming and nonblocking
processing of post or file uploads (using a supported loop) and custom
means to store it.

This attribute is only available when 'parse_on_demand' is set.  In addition,
once you request this attribute, you cannot access the traditional post or
file upload methods on request, since you've started a custom processing
cycle.

B<NOTE> We should verify that the C<body_fh> works as expected even with stream
and chunked request POSTS.  Might or might not require some coordinate with

=over 4

=item New Request attribute C<body_fh>

Add a new attribute C<body_fh> which exposes C<psgi.input> to the user.  This
should only be available if parse_on_demand is true and if the we have not already
requested post_parameters and any other methods that read psgi.input

=item disallow use of body_fh with other existing methods

Error when calling post_parameters and similar methods should we have already
requested a body_fh in the given request lifecycle.

=item Documentation

Added documentation and test cases.

=item Proof of concept and example

Use case examples should be written (adding to PerlCatalystAsync example
codebase of github.)

=back

=head1 Alternative method for accessing request parameters.

Miyagawa doesn't think highly of the Catalyst approach to accessing request
parameters.  See: L<Hash::MultiValue\RATIONALE> for more.

Although there are other, valid approaches to solving this (For example, one
might use L<Autobox>, there's something to be said for doing the right thing
well enough out of the box as to not trip up newcomers.  So we propose:

=over 4

=item new configuration option C<use_hash_merge_request_parameters>

Create and document a new global configuation option C<use_hash_merge_request_parameters>
which when enabled (it defaults to false) uses L<Hash::Merge> style parameters.

=item Update Catalyst Project Helper

new projects should default to using C<use_hash_merge_request_parameters>.

=back

=head1 Canonicalize Support for nested data in request parameters

Although it has become increasingly common for people to use JSON to support
complex data in HTTP POST/PUT, there are still cases where it is desirable
to support the idea of having a canonical approach for this using classic
HTML Form POST.  Additionally, some popular Javascript frameworks, such as
JQuery, by default hint POST parameters in such a way as to yield unexpected
results.

We propose the addition of a new Catalyst configuration option that would enable
the functionality currently found in the standalone plugin 
L<Catalyst::Plugin::Params::Nested>.  This would default to false for backward
compatibiliy purposes, but would be recommended for new projects.

Coring this would also allow for more careful integration of the recent Unicode
support added to core and hopefully lead to some possible optimizations or support
for evented code in core.

=over 4

=item New Configuration option to enable nested data in HTML form parameters

A new configuration option C<enable_nested_request_parameters> which defaults
to false, and when enabled will examine and expand classic HTML form parameters
in the same way as Catalyst::Plugin::Params::Nested.

Documentation and tests to match, and in addition there should be notes in the
Upgrading.POD for people that use the existing Plugin.

=item Alerts for existing users

We should detect that someone is enabling the plugin at setup time, and notice
them that they can remove the plugin and just enable the configuation option

=item Deprecation notice in exising plugin

We need a new release of L<Catalyst::Plugin::Params::Nested> that lets people
know if they are using the recent L<Catalyst> they can just enable the built
in features.

=item Update L<Catalyst::Devel>

The default helper script should create a new project with this enabled

=back

=head1 $c->config->{name} should has a sensible default

This configuration setting is used primarily in debugging screens and lacks a
default.  Given the relative low value here, it would be great if we did not
require a new application to set it manually, but instead we would infer a value
equal to __PACKAGE__ of the application subclass, which is the recommended
default anyone.

This would stop newbies from using something insane and reduce the number of
boilerplate configurations settings necessary in bootstrapping an application (
this has the benefit of doing the right thing by default and maybe a tiny step
in addressing the L<Catalyst> is a heavyweight framework meme.)

For this project to be successful, one would need three test cases.  One that
should the default working as expected with no configuration.  Second and third
demonstrating the ability to override the default as expected in ->config or
using a configuration plugin like L<ConfigLoader> (third test should skip if
L<ConfigLoader> is not present).  In addition all existing tests should pass
and documentation updated.  We could also remove this as a default built by
the project skeleton in L<Catalyst::Devel>.

=head1 Declare PSGI Middleware as Application Level Configuration

Since version 5.9x, Catalyst use L<PSGI>, L<Plack> but we don't have a good API
or community approved approach for exposing PSGI in applications, for reusing
middleware and in general interoperating with other PSGI based applications.

Being able to do so would broaden the available toolset for Catalyst programmers
while hopefully letting us better pool the limited resources for development
with programmers in other frameworks.  It has a possible long term side effect
that we might be able to deprecate some existing stand alone and L<Catalyst>
specific plugins, thus reducing the total amount of core team development
effort (for example, Plack middleware for serving static files could replace
the stand alone static plugin, and by deprecating it we'd reduce by one the
total number of plugins we need to test with each new release of L<Catalyst>.

There is an additional side effect in that if we are able to replace plugins
with middleware it reduces that fear, loathing associated with changing parts
of the L<Catalyst> internal API, since many plugins reach deep into L<Catalyst>
internals, making changing those internals harder, whereas L<Plack> middleware
does not have this issue.

Two distributions on CPAN have experimented with this idea,
L<Catalyst::Plugin::EnableMiddleware> and L<Catalyst::Action::FromPSGI>. Both
show the value of the concept, but as stand alone systems they are not as well
integrated as thye might be.  Being able to declare Plack middleware at the
application and controller level would benefit the project (particularly
at the controller/ action level, which would reduce total load for cases when
you don't need certain plugins).  For the first iteration lets find a neat
way to bring applying middleware at the application level, which will give us
good experience and some good use cases we can reuse when applying that to
the controller and action level.

We should have good use case tests for some of the more popular and commonly
used middleware.

=head1 $c->response should not be changable, offer a new approach

Although in some cases on older versions of L<Catalyst> setting
$c->response($res) manually would seem to work, we can't really support this
properly for streaming and async responses, and on newer L<Catalyst>.  Its
actually now quite tricky to build a $response by hand (requires a copy
of the current context and a few other bits).  Currently this is most commonly
seen in some test cases and when using the plugin L<Catalyst::Plugin::SubRequest>
which is itself problematic.  Given that this is very unlikely to do what you
want and that it interferes with core development as a sort of dark API,
lets start warning when people try to set $c->response, and ideally some docs
outlining strategies for a proper way to do this, with appropriate caveats
regarding streaming, etc.

For bonus points, we could create some utility to set the Catalyst::Response
from an existing acceptable common standard, such as L<HTTP::Response>.

See L<HTTP::Message::PSGI> as an interesting approach to solving this (and
also see L<Catalyst::Action::FromPSGI> for how to set a L<Catalyst::Response>
from an existing L<HTTP::Response>.  It might even be great to have utility
methods to set the L<Catalyst::Response> from a few of the more common
responses, such as L<HTTP::Response>, a PSGI coderef, or an object that
supports ->to_app or ->to_psgi, etc.  If we are very clever we could probably
properly support streaming with this.

For example (approaches to consider)

    $c->response->from_http_response($http_response);
    $c->response->from_plack_response($plack_response);

=head1 Catalyst::Plugin::SubRequest is bust, we should core it.

L<Catalyst::Plugin::SubRequest> has been 'tricky' to get right over the years.
Tricky enough that we are loath to core it, yet enough people use it that if
we bust it with a new release of L<Catalyst> we end up fixing it anyway.

Since we can't really just ignore it, lets core a limited set of the features
that this plugin offers, which should cover enough of the use cases as to get
people to stop using the existing plugin.  We could probably combine the 
approach take in L<Plack::Client> (see in particular L<Plack::Client::Backend::psgi_local>)
with some of the stuff we see over at: L<HTTP::Message::PSGI> and possible
some inspiration from L<Catalyst::Action::FromPSGI> to actually get something
that doesnt' suck. Here's a possible API:

    my $http_response = $c->subrequest($url, $params); # implicit GET
    my $http_response = $c->subrequest($http_request); #custom request using HTTP::Request

In this case we'd just use HTTP::Message as the transport format, and let you
deal with copying over that to your L<Catalyst::Response> yourself (but see the
previous todo item for thoughts on helper methods for that).

So we'd make the API more simple, and don't support the 'set the stash' and just
use a stable tranport API like L<HTTP::Message>.  This should cover most of the
rationally supportable cases people want a subrequest for and give us code we feel
is supportable over the long term (and in core so we can keep an eye on it)

In order to distinguish between internal and external subrequests, we could 
leverage ideas presented in L<Plack::Client> and use a custom URL scheme, like:

    use HTTP::Request::Common;
    my $http_response = $c->subrequest(
      POST $c->uri_for($target)->scheme('psgi-local'), \@formdata);

This would issue an interal subrequest, which does not trigger a full HTTP cycle
and in theory could be faster, but has the following issue:

B<ISSUE:> If we use a method other than the current subrequest plugin that is
base on URL or URI rather than trying to dispatch to an action in particular we
can have trouble IF the L<Catalyst> Application is wrapped in custom plack
middleware and/or mounted under a different URL namespace.  Since the current
Catalyst application can't really know anything going on outside its own
application space, (no real introspection in L<Plack>) the safest thing is
always going to be to issue a true LWP style http request.

B<Question:> Should we care now about asynchronicity or can that be deferred for
a later time (does deferring it now paint us into a corner...)

B<Question:>  Would we prefer to have this under the L<Catalyst::Util> or some
alternative namespace, as in:

    use HTTP::Request::Common;
    use Catalyst::Util 'subrequest';

    my $http_response = $c->subrequest(
      POST $c->uri_for($target)->scheme('psgi-local'), \@formdata);

Which would assist in controlling API inflation in Catalyst.pm as well as let
us add different methods and helper methods, for example:

    use Catalyst::Util ':Subrequest';
    my $http_response = $c->ubrequest(POST '/user', \@formdata );

Or even:

    $c->subrequest::POST( $uri_args, \@formdata);

This could be under L<Catalyst::Util> or under some new namespace such as 
L<Catalyst::Util::Subrequest>.

=head1 Support other common content body types in request

The fact that L<Catalyst> doesn't out of the box support body parameters other
than classic HTML forms is a bit atavistic.  On the other hand, the plethora
of content types (as well as the API approach) we see in the oddly named
L<Catalyst::Action::REST> is probably a bit too far.  It seems the web
community has consolodated around JSON, so supporting that with the pure perl
JSON parse (but use an XS version if available) as well as having a decent
API allowing one to register at a global level data parsing Handlers for
various content types would be good.

For example, given a JSON post

    my $params = $c->request->data; # JSON decoding by default

For example, adding a new handler

    $c->register_data_handler( 'application/foo' => sub { decode_foo($_) });

Hopefully this feature will start (not silence) a conversation about how to
offer a more fine grained, controller or action level API for this as well.
In other words this is support for work out of the box and with simple prototyping
but we'd want people to consider the full constellation of possible approaches.

B<Question:> Should we be able to register global data handlers via $c->config?

B<Question:> Should we care now about asynchronicity or can that be deferred for
a later time (does deferring it now paint us into a corner...)

=head1 Catalyst::Controller should set @INC and load all needed imports

Currently when creating a controller one must declare a confusing amount of
boilerplate code, For example:

    MyApp::Web::Controller::User;

    use Moose;

    BEGIN { extends 'Catalyst::Controller' }

    ## code, code, code


In particular the BEGIN block always is good for a double take.

The reasons for this are many, and some have to do with how L<Catalyst> auto
loads components, while other reasons exist for backcompatiblity.  The
proposal is to let L<Catalyst::Controller> do more lifting such that you
could just do

    MyApp::Web::Controller::User;

    use Catalyst::Controller;

    ## code, code, code

This would have multiple benefits:

It would encourage people to extend Controllers using Roles and delegation
over inheritance.

It would make it easier for people experimenting with DSL approaches by
providing a canonical hook (and allow for the possibility of having some DSL
in core itself).

We could avoid our current problems with how L<MooseX::MethodAttributes> gets
installed

It would make it more similar to the way the application class is declared (for
better or worse).

There's a bit less code in each controller (probably means a lot less code in a
typical L<Catalyst> Application)

The main downsides is that it subtly moves us away from the idea that a
controller is just a plain old Perl class, and that there may be other and more
carefully scoped solutions to the problem given.

B<Note> This idea probably needs more discussion, for example I assume we don't
want to import the standard Moose keywords, but how are we going to make it
easy for people that want to plugin new keyword imports do so.

=head1 Limited Content Negotiation Features

Given the state of the Catalyst dispatcher, it will probably not be easy to
support rich RESTful content negotiation features, to the degree that a
dedicated approach such as L<Web::Machine> could.  However, many people don't
want or need a full on RESTful toolkit, but might find it desireable to support
a limited ablity to match actions based on common types (forms, JSON, etc).

We could straightforwardly support content request and response matching, but
using Catalyst's built in 'first match wins' approach, rather than attempt to
provide complex action matching features based on 'q' or quality numbers.  This
would look something like this:

    sub get_json : Local Provides(JSON) { }
    sub parse_json : Local Consumes(JSON) { }
    sub get_xml : Local Provides(XML) { }
    sub parse_xml : Local Consumes(XML) { }

We'd leavage method attributes C<Provides> and C<Consumes> as this would be
familiar to similiar systems in other software frameworks (we could probably
take some inspiration from these approaches.

(See https://github.com/jjn1056/CatalystX-Example-Todo/blob/master/lib/CatalystX/Example/Todo/Web/Controller/API.pm
for a working prototype, just please do use that code in production.)

People that just wish to support the abililty to dispatch based on if a form
POST is JSON or form-data would find this useful.  This first iteration
would not support all of the automatic generation of HTTP header information,
etc. you might expect but there is nothing in taking such a route that would
prevent us from doing so in the future (or for someone to experiment with
in the extended L<Catalyst> ecosystem.

The downside is that its far from a full on RESTful system, but then again
most people don't seem to really want that.

=head1 PROTOTYPE: Do something meanful with action return types

  TBD, but see https://github.com/jjn1056/CatalystX-Example-Todo/blob/master/lib/CatalystX/Example/Todo/Web/Controller/API.pm

  Other possibilities include supporting return values similar to L<Web::Simple>
  such as plack applications, middleware and filters.

=head1 PROTOYPE:  Do something sane with action return values

  TBD, but see https://github.com/jjn1056/CatalystX-Example-Todo/blob/master/lib/CatalystX/Example/Todo/Web/Controller/API.pm

=head1 PROTOTYPE:  Method Signature dependency injection

  TBD, but see https://github.com/jjn1056/CatalystX-Example-Todo/blob/master/lib/CatalystX/Example/Todo/Web/Controller/API.pm

=head1 Use L<Bread::Board> in replacement of existing homegrown service locator

There's been on ongoing project to graft B<Bread::Board> into L<Catalyst>.  The
current B<TODO> list is here:

  https://trello.com/board/catalyst-development/501045ab15f0c0e51e041192

But the project probably needs a reboot.  More details required, for now see
the trello list and discuss on IRC.

=head1 Convert all existing L<Catalyst::DispatchTypes> to use Chained

The main issue I think is that Chained actions have somewhat of a hacky
aspect to them, (including how CaptureArgs get mapped to regular args, for
example, ust take a look at the source) but the chain of command paradigm it
introduces is quite powerful and someone unique to L<Catalyst>.  The idea here
is that the standard dispatch types like Local and Path would be translated
under the hood to be instances of a a one action chain.  

It would greatly simplify the existing dispatch system and hopefully lead to
more chances for optimization in the future.

The only downside I see is it might be a little slower since there's going
to be a bit more overhead per action.

t0m has an existing branch for this, which should help a lot.

I think we'd expect this to be considered done if the full test suite passes
as well as the test suites of the major plugins and stand alones models
and applications on CPAN (list to be determined).

=cut


